name: Build Linux Wheels

on:
  push:
    branches:
      - nightly
      - release/*
    tags:
      # NOTE: Binary build pipelines should only get triggered on release candidate builds
      # Release candidate tags look like: v1.11.0-rc1
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  generate-matrix:
    if: github.repository_owner == 'pytorch'
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      test-infra-repository: pytorch/test-infra
      test-infra-ref: main
      with-cuda: enable
      with-rocm: enable
      build-python-only: enable
  filter-python-versions:
    needs: generate-matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: python
        env:
          A: ${{ needs.generate-matrix.outputs.matrix }}
        run: |
          import os
          import json

          a = os.environ["A"]
          github_output_file = os.environ["GITHUB_OUTPUT"]
          a_as_dict = json.loads(a)

          new_dict = {"include": []}
          for build in a_as_dict["include"]:
            if build["python_version"] != "3.13":
              new_dict["include"].append(build)

          with open(github_output_file, "w") as handle:
            handle.write(f"matrix={json.dumps(new_dict)}")
  check-output:
    needs: filter-python-versions
    runs-on: ubuntu-latest
    steps:
      - name: asdf
        shell: python
        env:
          A: ${{ needs.filter-python-versions.outputs.matrix }}
        run: |
          print("hello")
  build:
    needs: filter-python-versions
    name: ${{ matrix.repository }}
    uses: pytorch/test-infra/.github/workflows/build_wheels_linux.yml@main
    strategy:
      fail-fast: false
    with:
      repository: pytorch/torchtune
      ref: ""
      package-name: torchtune
      build-matrix: ${{ needs.filter-python-versions.outputs.matrix }}
      pre-script: .github/scripts/pre_build_script.sh
      trigger-event: ${{ github.event_name }}
      build-platform: 'python-build-package'
      pip-install-torch-extra-args:
        torchvision
        torchao
