#!/usr/bin/env python3

# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

"""
Launcher and utilities for torchtune recipes

``tune`` provides functionality for launching torchtune recipes as well as local
recipes. Aside from torchtune recipe utilties it integrates with ``torch.distributed.run``
to support distributed job launching by default. ``tune`` offers everyting that ``torchrun``
does with the following additional functionalities:

1. ``tune <recipe> <recipe_args>`` with no optional ``torchrun`` options launches a single python process

2. ``<recipe>`` and recipe arg ``<config>`` can both be passed in as names instead of paths if they're included in torchtune

3. ``tune <path/to/recipe.py> <recipe_args>`` can be used to launch local recipes

4. ``tune <torchrun_options> <recipe> <recipe_args>`` will launch a torchrun job

5. ``tune recipe`` and ``tune config`` commands provide utilities for listing and copying packaged recipes and configs

.. note:: ``tune`` is a python
          `console script <https://packaging.python.org/en/latest/specifications/entry-points/#use-for-scripts>`_
          to the main module
          `scripts.cli_utils.tune <https://github.com/pytorch-labs/torchtune/blob/main/scripts/cli_utils/tune>`_
          declared in the ``scripts`` configuration in
          `setup.py <https://github.com/pytorch-labs/torchtune/blob/main/setup.py>`_.
          It is equivalent to invoking ``python -m scripts.cli_utils.tune``.
"""
import argparse
import os
from pathlib import Path
import runpy
import sys
import textwrap
from torch.distributed.run import get_args_parser, run

import torchtune
from recipes import list_recipes
from scripts import list_scripts


def _update_parser_help(parser):
    parser.description = "Torch Tune Recipe Launcher"
    parser.usage = "tune [options] <recipe> [recipe_args]"
    parser.formatter_class = argparse.RawDescriptionHelpFormatter
    parser.epilog = textwrap.dedent("""\
    utilities (usage: tune <command>):
        recipe      Utilities for built in recipes
        config      Utilities for built in configs
    """)

    # Update torchrun argparse name for more accurate CLI help
    actions = [a.dest for a in parser._actions]
    # Update training_script help to be recipe
    idx = actions.index("training_script")
    parser._actions[idx].dest = "recipe"
    parser._actions[idx].help = "Name or path to recipe to be launched followed by args"

    # Update training_script_args help to be recipe_args
    idx = actions.index("training_script_args")
    parser._actions[idx].dest = "recipe_args"

def _is_distributed_args(args):
    total = len(sys.argv) - 1 # total args minus "tune"
    script_args = len(args.recipe_args) + 1 # script args + 1 for script name
    return total > script_args

if __name__ == "__main__":
    parser = get_args_parser()
    _update_parser_help(parser)
    args = parser.parse_args()

    distributed_args = _is_distributed_args(args)
    cmd = args.recipe
    if not cmd.endswith(".py"):
        pkg_path = str(Path(torchtune.__file__).parent.parent.absolute())
        if cmd == "recipe":
            assert not distributed_args, "You can't use distributed args with the recipe util"
            cmd = os.path.join(pkg_path, "scripts", "cli_utils", "recipe_utils.py")
        elif cmd == "config":
            assert not distributed_args, "You can't use distributed args with the config util"
            cmd = os.path.join(pkg_path, "scripts", "cli_utils", "config_utils.py")
        elif cmd in list_recipes():
            cmd = os.path.join(pkg_path, "recipes", f"{cmd}.py")
            args.recipe = cmd

            # Replace config name with package path if provided
            if "--config" in args.recipe_args:
                cfg_idx = args.recipe_args.index("--config") + 1
                config = args.recipe_args[cfg_idx]
                if not config.endswith(".yaml"):
                    args.recipe_args[cfg_idx] = os.path.join(pkg_path, "recipes", "configs", f"{config}.yaml")
        elif cmd in list_scripts():
            cmd = os.path.join(pkg_path, "scripts", f"{cmd}.py")
            args.recipe = cmd
            assert not distributed_args, "You can't use distributed args with scripts"
        else:
            print("Unknown command, for a list of available commands, run with --help")

    if distributed_args:
        args.training_script = cmd # arg names expected by torchrun
        args.training_script_args = args.recipe_args
        run(args)
    else:
        sys.argv = [cmd] + args.recipe_args
        runpy.run_path(cmd, run_name="__main__")
