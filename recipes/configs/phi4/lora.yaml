# Config for multi-device LoRA finetuning in lora_finetune_distributed.py
# using a Phi4 (14B) model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download microsoft/phi-4 --output-dir /tmp/phi-4 --hf-token <HF_TOKEN>
#
# To launch on 2 devices, run the following command from root:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config phi4/lora
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config phi4/lora checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA finetuning please use mini_lora_single_device.yaml
# or mini_qlora_single_device.yaml

output_dir: /tmp/torchtune/phi-4/lora # /tmp may be deleted by your system. Change it to your preference.

# Model arguments
model:
  _component_: torchtune.models.phi4.lora_phi4_14b
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 8  # higher increases accuracy and memory
  lora_alpha: 16  # usually alpha=2*rank
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.phi4.phi4_14b_tokenizer
  vocab_path: /tmp/phi-4/vocab.json
  merges_path: /tmp/phi-4/merges.txt
  max_seq_len: null

# Checkpointer
checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/phi-4
  checkpoint_files: [
    model-00001-of-00006.safetensors,
    model-00002-of-00006.safetensors,
    model-00003-of-00006.safetensors,
    model-00004-of-00006.safetensors,
    model-00005-of-00006.safetensors,
    model-00006-of-00006.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: PHI3_MINI
resume_from_checkpoint: False
save_adapter_weights_only: False

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_cleaned_dataset
  packed: False  # True increases speed
seed: null
shuffle: True

# Fine-tuning arguments
epochs: 1
max_steps_per_epoch: null
batch_size: 2
gradient_accumulation_steps: 8  # Use to increase effective batch size
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: False  # True reduces memory
enable_activation_offloading: False  # True reduces memory
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
