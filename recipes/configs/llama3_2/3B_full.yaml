# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.2 3B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.2-3B-Instruct --output-dir /tmp/Llama-3.2-3B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 4 devices, run the following command from root:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_2/3B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_2/3B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 3B_full_single_device.yaml for those cases


output_dir: /tmp/torchtune/llama3_2_3B/full # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /tmp/Llama-3.2-3B-Instruct/original/tokenizer.model
  max_seq_len: 4096

# Dataloader
dataloader:
  batch_size: 16
  # num_workers and pin_memory can be added here if needed

# Dataset - now a list to support multiple weighted sources
dataset:
  - _component_: torchtune.datasets.slimorca_iterable_dataset
    shuffle_buffer_size: 1000
    weight: 0.8
    split: train[:5%] # simulate 1 epoch quickly
  - _component_: torchtune.datasets.alpaca_iterable_dataset
    shuffle_buffer_size: 1000
    weight: 0.2
    split: train[:5%] # simulate 1 epoch quickly

# On-the-fly packing
# Set packing_strategy: null to disable packing
packing_strategy:
  _component_: torchtune.datasets.TextPacker

seed: 42

# Validation not supported yet with iterable datasets

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_3b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Llama-3.2-3B-Instruct/
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3_2
resume_from_checkpoint: False

optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  fused: True
loss:
  _component_: torchtune.modules.loss.LinearCrossEntropyLoss

# Training - now step-based
num_training_steps: 100 # Total number of training steps to run
save_every_n_steps: 200 # Save a checkpoint every N steps. Using 200 to avoid ckpt.
gradient_accumulation_steps: 1
dataset_metrics_log_freq: 5 # Log dataset-specific metrics every N steps

# Environment
device: cuda
dtype: bf16

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
