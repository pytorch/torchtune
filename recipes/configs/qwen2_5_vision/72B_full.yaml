# Config for single device full finetuning in full_finetune_distributed.py
# using a Qwen2.5 72B
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download Qwen/Qwen2.5-72B-Instruct --output-dir /tmp/Qwen2.5-72B-Instruct
#
# To launch on 4 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 8 full_finetune_distributed --config qwen2_5/72B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 8 full_finetune_distributed --config qwen2_5/72B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config was only tested on a 8xH100 machine.

output_dir: /tmp/torchtune/qwen2_5_72B/full # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen2_5_vision.Qwen25VLTransform
  path: /tmp/Qwen2.5-VL-3B-Instruct/vocab.json
  merges_file: /tmp/Qwen2.5-VL-3B-Instruct/merges.txt
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.multimodal.the_cauldron_dataset
  packed: False  # True increases speed
  subset: ocrvqa
seed: null
shuffle: True
collate_fn: torchtune.models.qwen2_5_vision.qwen2_5_vl_padded_collate_images


# Model Arguments
model:
  _component_: torchtune.models.qwen2_5_vision.qwen2_5_vl_72b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Qwen2.5-VL-72B-Instruct
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00018"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: QWEN2_5_VL
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 1
optimizer:
  _component_: torch.optim.AdamW
  lr: 5e-6
optimizer_in_bwd: True  # True saves memory. Requires gradient_accumulation_steps=1
loss:
  _component_: torchtune.modules.loss.LinearCrossEntropyLoss
max_steps_per_epoch: 100
gradient_accumulation_steps: 1  # Use to increase effective batch size
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Training environment
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
custom_sharded_layers: ['decoder.tok_embeddings', 'decoder.output']

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: False
log_level: INFO  # DEBUG, WARN, etc.


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
