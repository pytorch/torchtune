# Config for single device full finetuning in full_finetune_single_device.py
# using a Mistral 12B model
#
# This config uses hyperparameters based on small set of experiments and information
# available on various forums. These are not meant to replicate the numbers
# from the paper
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download mistralai/Mistral-Nemo-Base-2407 --output-dir /tmp/Mistral-Nemo-12B-v0.1 --ignore-patterns "*consolidated.safetensors*" --hf-token <HF_TOKEN>
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config mistral/12B_full_low_memory
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config mistral/12B_full_low_memory checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

output_dir: /tmp/torchtune/mistral_12B/full_low_memory # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: torchtune.models.mistral.mistral_tekken_tokenizer
  path: /workspace/Mistral-Nemo-12B-v0.1/tekken.json
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  packed: False  # True increases speed
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.mistral.mistral_nemo_12b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /workspace/Mistral-Nemo-12B-v0.1
  checkpoint_files: [
    model-00001-of-00005.safetensors,
    model-00002-of-00005.safetensors,
    model-00003-of-00005.safetensors,
    model-00004-of-00005.safetensors,
    model-00005-of-00005.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: MISTRAL
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 1
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 5e-6
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1  # Use to increase effective batch size
optimizer_in_bwd: True  # True saves memory. Requires gradient_accumulation_steps=1

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True  # True reduces memory

# Reduced precision
dtype: bf16

# Model compilation
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
