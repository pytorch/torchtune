# Config for multi-device LoRA finetuning in lora_finetune_completion_distributed.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-7b-hf --output-dir /tmp/Llama-2-7b-hf --ignore-patterns "*.safetensors" --hf-token <HF_TOKEN>
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 lora_finetune_completion_distributed --config llama2/7B_lora_completion
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 lora_finetune_completion_distributed --config llama2/7B_lora_completion checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA finetuning please use 7B_lora_single_device.yaml
# or 7B_qlora_single_device.yaml

# Add some high level XP naming configs
run_name: all_scale_query_end_brand_lower__dropout_0.05__rank_24__alpha_32
base_model_path: /nfs/scratch/qhsu/models/base/Llama-2-7b-hf
base_model_files: [pytorch_model-00001-of-00002.bin, pytorch_model-00002-of-00002.binrawr]
output_dir_parent: /nfs/scratch/qhsu/models/finetuned/mops
dataset_source: /nfs/scratch/qhsu/dataset/relevance_labeling__all_scale_query_end_brand_lower
val_dataset_source: /nfs/scratch/qhsu/dataset/relevance_labeling__all_scale_query_end_brand_lower
train_dataset_split: train
val_dataset_split: test
optimizer_lr: 1e-4
optimizer_weight_decay: 0.01
lr_num_warmup_steps: 40
max_tokens: 850
eval_mode: false

# Model Arguments
model:
  _component_: torchtune.models.llama2.lora_llama2_7b
  lora_attn_modules: ['q_proj', 'v_proj', 'k_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: True
  lora_rank: 24
  lora_alpha: 32
  lora_dropout: 0.05

tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: ${base_model_path}/tokenizer.model

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${base_model_path}
  checkpoint_files: ${base_model_files}
  # checkpoint_dir: ${output_dir_parent}/amazon_esci__dropout_0.05__rank_24__alpha_32
  # checkpoint_files: [hf_model_0001_1.pt, hf_model_0002_1.pt]
  adapter_checkpoint: null
  recipe_checkpoint: null
  output_dir: ${output_dir_parent}/${run_name}
  model_type: LLAMA2
resume_from_checkpoint: False
save_adapter_weights_only: True

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.prompt_completion_dataset
  # source: /nfs/scratch/qhsu/dataset/relevance_labeling_esci__may_baseline_reorganized
  source: ${dataset_source}
  from_disk: True
  text_column: prompt
  label_column: esci_label
  split: ${train_dataset_split}
  max_seq_len: ${max_tokens}
  packed: False
seed: null
shuffle: True
batch_size: 4

# Hack for now to have separate validation dataset loader
val_dataset:
  _component_: torchtune.datasets.prompt_completion_dataset
  # source: /nfs/scratch/qhsu/dataset/relevance_labeling_esci__may_baseline_reorganized
  source: ${val_dataset_source}
  from_disk: True
  text_column: prompt
  label_column: esci_label
  split: ${val_dataset_split}
  max_seq_len: ${max_tokens}
  packed: False
val_batch_size: 32
# validate_every_n_steps: 2 # Not working

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: ${optimizer_weight_decay}
  lr: ${optimizer_lr}
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: ${lr_num_warmup_steps}

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training
epochs: 3
max_steps_per_epoch: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory
gradient_accumulation_steps: 32   # Use to increase effective batch size
clip_grad_norm: 1.0
# Logging
output_dir: ${output_dir_parent}/${run_name}/logs
# enable logging to the built-in CometLogger
metric_logger:
  _component_: torchtune.training.metric_logging.CometLogger
  # the Comet project to log to
  project: llama-query-product-relevance-mops
  experiment_name: ${run_name}
  # tags: [lora, llama2_7B, completion, distributed]
log_every_n_steps: 5
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: False  # True reduces memory
enable_activation_offloading: False  # True reduces memory

# Show case the usage of pytorch profiler
# Set enabled to False as it's only needed for debugging training
profiler:
  _component_: torchtune.training.setup_torch_profiler

  enabled: False

  # Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  # trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 5
  active_steps: 2
  num_cycles: 1
