# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama2 13B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-13b-hf --output-dir /tmp/Llama-2-13b-hf --hf-token <HF_TOKEN>
#
# To launch on 4 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 4 full_finetune_distributed --config llama2/13B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 4 full_finetune_distributed --config llama2/13B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config should be used with 2+ GPUs. Single device full fine-tuning
# requires several memory optimizations which are exposed through
# 7B_full_single_device.yaml. Please update the model and checkpoints to 13B
# in that config.

# Model Arguments
model:
  _component_: torchtune.models.llama2.llama2_13b

checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Llama-2-13b-hf/
  checkpoint_files: [
    pytorch_model-00001-of-00003.bin,
    pytorch_model-00002-of-00003.bin,
    pytorch_model-00003-of-00003.bin
  ]
  recipe_checkpoint: null
  output_dir: /tmp/Llama-2-13b-hf/
  model_type: LLAMA2
resume_from_checkpoint: False

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: /tmp/Llama-2-13b-hf/tokenizer.model

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
seed: null
shuffle: True

# Fine-tuning arguments
batch_size: 2
epochs: 3
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
output_dir: /tmp/alpaca-llama2-finetune
log_every_n_steps: 1
log_peak_memory_stats: False
