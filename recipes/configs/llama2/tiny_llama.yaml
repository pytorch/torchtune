# Config for single-device full finetuning
# using a Llama2 20M param tiny model
#
# This config assumes that you've run the following command before launching
# You can gran the model checkpoint using
#   wget https://ossci-datasets.s3.amazonaws.com/torchtune/small-ckpt-tune-03082024.pt 
# place it in the tiny_llama directory.
#
# and use the same tokenizer as llama2
#
# tune run full_finetune_single_device \
#   --config recipes/configs/llama2/tiny_llama.yaml

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: tiny_llama/tokenizer.model

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama2.llama2
  vocab_size: 32000
  num_layers: 4
  num_heads: 16
  embed_dim: 256
  max_seq_len: 2048
  norm_eps: 1e-5
  num_kv_heads: 8

checkpointer:
  _component_: torchtune.utils.FullModelTorchTuneCheckpointer
  checkpoint_dir: tiny_llama
  checkpoint_files: ["small-ckpt-tune-03082024.pt"]
  recipe_checkpoint: null
  output_dir: tiny_llama/checkpoints
  model_type: LLAMA2
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 2
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: 20
gradient_accumulation_steps: 1
optimizer_in_bwd: False
compile: False


# Training env
device: mps

# Distributed
cpu_offload: False

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: fp32
# Logging
output_dir: /tmp/full_finetune_output



metric_logger:
  _component_: torchtune.utils.metric_logging.WandBLogger
  project: torchtune
log_every_n_steps: 1

# # Logging
# output_dir: /tmp/full_finetune_output
# metric_logger:
#   _component_: torchtune.utils.metric_logging.DiskLogger
#   log_dir: ${output_dir}
# log_every_n_steps: null