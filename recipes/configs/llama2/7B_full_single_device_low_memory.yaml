# Config for single device full finetuning in full_finetune_single_device.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download --repo-id meta-llama/Llama-2-7b \
#   --hf-token <HF_TOKEN> \
#   --output-dir /tmp/llama2
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device \
#   --config llama2/7B_full_single_device_low_memory \
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune --nnodes 1 --nproc_per_node 1 full_finetune_single_device \
#   --config llama2/7B_full_single_device_low_memory \
#   checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.


# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: /tmp/llama2/tokenizer.model

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama2.llama2_7b

checkpointer:
  _component_: torchtune.utils.FullModelMetaCheckpointer
  checkpoint_dir: /tmp/llama2
  checkpoint_files: [consolidated.00.pth]
  recipe_checkpoint: null
  output_dir: /tmp/llama2
  model_type: LLAMA2
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 2
epochs: 1
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 2e-5
optimizer_in_bwd: True
loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1


# Training environment
device: cuda

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
output_dir: /tmp/alpaca-llama2-finetune
log_every_n_steps: null
