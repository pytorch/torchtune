# Config for multi-device LoRA DPO alignment in lora_dpo_distributed.py
# using a Llama2 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-2-7b-hf --output-dir /tmp/Llama-2-7b-hf --ignore-patterns "*.safetensors" --hf-token <HF_TOKEN>
#
# To launch on 2 devices, run the following command from root:
#   tune run --nnodes 1 --nproc_per_node 2 lora_dpo_distributed --config llama2/7B_lora_dpo
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nnodes 1 --nproc_per_node 2 lora_dpo_distributed --config llama2/7B_lora_dpo checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA DPO alignment please use 7B_lora_dpo_single_device.yaml

# Model Arguments
model:
  _component_: torchtune.models.sarvam1.lora_sarvam1
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 64  # higher increases accuracy and memory
  lora_alpha: 128  # usually alpha=2*rank
  lora_dropout: 0.1

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: /model/tokenizer.model
  max_seq_len: 8192

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /model
  checkpoint_files:
    [pytorch_model.bin]
  adapter_checkpoint: null
  recipe_checkpoint: null
  output_dir: /projects/data/mohit_sarvam_ai/torchtune/output/sarvam1-dpo-large-64-128-1e-5-0.05
  model_type: LLAMA3
  safe_serialization: True
resume_from_checkpoint: False
save_adapter_weights_only: False

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.preference_dataset
  source: allenai/llama-3.1-tulu-3-70b-preference-mixture
  split: train
seed: null
shuffle: True
batch_size: 2

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.05
  lr: 1e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.rlhf.loss.DPOLoss
  beta: 0.05
  label_smoothing: 0

# Training
epochs: 1
max_steps_per_epoch: 1000_000
gradient_accumulation_steps: 4  # Use to increase virtual batch size
compile: False  # pytorch compile, set to true for better perf/memory

# Logging
output_dir: /projects/data/mohit_sarvam_ai/torchtune/output/logs
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}
log_every_n_steps: 1
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory
