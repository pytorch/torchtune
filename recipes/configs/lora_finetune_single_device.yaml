# Config for LoRAFinetuneRecipeSingleDevice in lora_finetune_single_device.py
#
# To launch, run the following command from root:
#    tune lora_finetune_single_device \
#    --config lora_finetune_single_device \
#    checkpointer.checkpoint_dir=<YOUR_CHECKOPOINT_DIR> ...

# Model Arguments
model:
  _component_: torchtune.models.llama2.lora_llama2_7b
  lora_attn_modules: ['q_proj', 'v_proj']
  apply_lora_to_mlp: False
  apply_lora_to_output: False
  lora_rank: 8
  lora_alpha: 16

checkpointer:
  _component_: torchtune.utils.FullModelMetaCheckpointer
  checkpoint_dir: /tmp/llama2/
  checkpoint_files: [consolidated.00.pth]
  adapter_checkpoint: null
  recipe_checkpoint: null
  output_dir: /tmp/llama2/
  model_type: LLAMA2
resume_from_checkpoint: False

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama2.llama2_tokenizer
  path: /tmp/llama2/tokenizer.model

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
  use_clean: True
seed: null
shuffle: True
batch_size: 2

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training
epochs: 1
max_steps_per_epoch: null

# Logging
output_dir: /tmp/lora_finetune_output
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
log_every_n_steps: 1

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True
