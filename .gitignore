# Derived from basic .gitignore template for python projects:
#   https://github.com/github/gitignore/blob/main/Python.gitignore
# Please maintain the alphabetic order of the section titles
# To debug why a file is being ignored, use the command:
#    git check-ignore -v $my_ignored_file

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Cython debug symbols
cython_debug/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Django stuff
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Flask stuff
instance/
.webassets-cache

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# IPython
profile_default/
ipython_config.py

# Jupyter Notebook
*.ipynb_checkpoints

# mkdocs documentation
/site

# Model saving / checkpointing
*.pt
*.pth
*.ckpt

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# PyBuilder
.pybuilder/
target/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
# Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
# poetry.lock

# PEP 582: https://peps.python.org/pep-0582/
#   This PEP proposes to add to Python a mechanism to automatically recognize a __pypackages__
#   directory and prefer importing packages installed in this location over user or global site-packages.
#   This will avoid the steps to create, activate or deactivate virtual environments. Python will use
#   the __pypackages__ from the base directory of the script when present.
__pypackages__/

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Rope project settings
.ropeproject

# SageMath parsed files
*.sage.py

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/build
# sphinx-gallery
docs/source/generated_examples/
docs/source/gen_modules/
docs/source/generated/
docs/source/sg_execution_times.rst
# pytorch-sphinx-theme gets installed here
docs/src

# Spyder project settings
.spyderproject
.spyproject

# System / program generated files
*.err
*.log
*.swp
.DS_Store

# Translations
*.mo
*.pot

# TorchX
*.torchxconfig

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# VSCode
.vscode/

# wandb
wandb/
